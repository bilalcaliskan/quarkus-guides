# Quarkus itself is configured via the same mechanism as your application. Quarkus reserves the quarkus. namespace for
# its own configuration. For example to configure the HTTP server port you can set quarkus.http.port
quarkus.http.port=9090

greeting.message = hello
greeting.name = quarkus
greeting.hidden.prizeAmount=10
greeting.hidden.recipients=Jane,John

# Quarkus supports the notion of configuration profiles. These allow you to have multiple configuration in the same
# file and select between them via a profile name. The syntax for this is %{profile}.config.key=value.
%dev.quarkus.http.port=8181


## Using Quarkus Profiles
# By default Quarkus has three profiles, although it is possible to use as many as you like. The default profiles are:
    # dev - Activated when in development mode (i.e. quarkus:dev)
    # test - Activated when running tests
    # prod - The default profile when not running in development or test mode

# For example if I want a staging profile with a different HTTP port I can add the following:
%staging.quarkus.http.port=9999
# And then set the QUARKUS_PROFILE environment variable to staging to activate my profile.

# The proper way to check the active profile programmatically is to use the getActiveProfile method of
# io.quarkus.runtime.configuration.ProfileManager.


## Using Property Expressions
# if your configuration property is a build time configuration property, the property expression will be resolved at
# build time. If your configuration property is overridable at runtime, the property expression will be resolved at
# runtime.
# Property expressions are defined this way: ${my-property-expression}.
# For example, having the following property:
remote.host=quarkus.io
# and another property defined as:
callable.url=https://${remote.host}/